{
    "swagger":"2.0",
    "info":{
       "version":"1.0",
       "title":"CR Single Sign On"
    },
    "basePath":"/",
    "consumes":[
       "application/json"
    ],
    "paths":{
       "/testApi":{
          "get":{
             "tags":[
                "Helper"
             ],
             "summary":"Test to check that the API is working at a superficial level",
             "operationId":"TestApi",
             "consumes":[
 
             ],
             "produces":[
                "text/plain",
                "application/json",
                "text/json"
             ],
             "parameters":[
 
             ],
             "responses":{
                "200":{
                   "description":"Success",
                   "schema":{
                      "uniqueItems":false,
                      "type":"array",
                      "items":{
                         "type":"string"
                      }
                   }
                }
             }
          }
       },
       "/jwt":{
          "get":{
             "tags":[
                "Helper"
             ],
             "summary":"Gets a JWT token from a valid userId",
             "operationId":"Jwt",
             "consumes":[
 
             ],
             "produces":[
                "text/plain",
                "application/json",
                "text/json"
             ],
             "parameters":[
                {
                   "name":"userId",
                   "in":"query",
                   "required":true,
                   "type":"integer",
                   "format":"int32"
                }
             ],
             "responses":{
                "200":{
                   "description":"Success",
                   "schema":{
                      "type":"string"
                   }
                }
             }
          }
       },
       "/claims":{
          "get":{
             "tags":[
                "Helper"
             ],
             "summary":"Gets the claims from a JWT token. Requires authentication.",
             "operationId":"GetUserClaims",
             "consumes":[
 
             ],
             "produces":[
                "text/plain",
                "application/json",
                "text/json"
             ],
             "parameters":[
 
             ],
             "responses":{
                "200":{
                   "description":"Success",
                   "schema":{
                      "type":"string"
                   }
                }
             }
          }
       },
       "/generateAutoLoginToken":{
          "post":{
             "tags":[
                "Helper"
             ],
             "summary":"Creates a token for testing",
             "operationId":"GenerateAutoLoginToken",
             "consumes":[
 
             ],
             "produces":[
                "text/plain",
                "application/json",
                "text/json"
             ],
             "parameters":[
                {
                   "name":"userId",
                   "in":"query",
                   "required":true,
                   "type":"integer",
                   "format":"int32"
                }
             ],
             "responses":{
                "200":{
                   "description":"Success",
                   "schema":{
                      "format":"uuid",
                      "type":"string"
                   }
                }
             }
          }
       },
       "/info":{
          "get":{
             "tags":[
                "Sso"
             ],
             "summary":"Get info for users",
             "operationId":"loginInfo",
             "consumes":[
 
             ],
             "produces":[
                "text/plain",
                "application/json",
                "text/json"
             ],
             "parameters":[
 
             ],
             "responses":{
                "200":{
                   "description":"Success",
                   "schema":{
                      "$ref":"#/definitions/InfoViewModel"
                   }
                }
             },
             "default":{
                "description":"Default response.",
                "schema":{
                   "properties":{
                      "errors":{
                         "items":{
                            "properties":{
                               "message":{
                                  "type":"string"
                               },
                               "path":{
                                  "type":"string"
                               }
                            },
                            "required":[
                               "message"
                            ],
                            "type":"object"
                         },
                         "type":"array"
                      }
                   },
                   "required":[
                      "errors"
                   ],
                   "type":"object"
                }
             }
          }
       },
       "/login":{
          "post":{
             "tags":[
                "Sso"
             ],
             "summary":"Login with username and password",
             "operationId":"loginLogin",
             "consumes":[
                "multipart/form-data"
             ],
             "produces":[
                "text/plain",
                "application/json",
                "text/json"
             ],
             "parameters":[
                {
                   "name":"Username",
                   "in":"formData",
                   "required":true,
                   "type":"string",
                   "maxLength":100,
                   "minLength":0
                },
                {
                   "name":"Password",
                   "in":"formData",
                   "required":true,
                   "type":"string",
                   "maxLength":250,
                   "minLength":0
                }
             ],
             "responses":{
                "200":{
                   "description":"Success",
                   "schema":{
                      "$ref":"#/definitions/LoginViewModel"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/ErrorResultViewModel"
                   }
                }
             }
          }
       },
       "/token":{
          "get":{
             "tags":[
                "Sso"
             ],
             "summary":"Login with one-time-token",
             "operationId":"tokenLogin",
             "consumes":[
 
             ],
             "produces":[
                "text/plain",
                "application/json",
                "text/json"
             ],
             "parameters":[
                {
                   "name":"token",
                   "in":"query",
                   "required":true,
                   "type":"string",
                   "format":"uuid"
                }
             ],
             "responses":{
                "200":{
                   "description":"Success",
                   "schema":{
                      "$ref":"#/definitions/LoginViewModel"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/ErrorResultViewModel"
                   }
                }
             }
          }
       },
       "/refresh":{
          "get":{
             "tags":[
                "Sso"
             ],
             "summary":"Refresh the JWT token",
             "description":"Allows a refresh of the JWT token if it has expired within the last 15 minutes.\r\nA JWT token that is expired, but still within the 15 minutes grace period causes a\r\nreturn status of 408(Request Timeout) from any request that needs a JWT token.\r\nWithin the grace period a call to / refresh return a new JWT token with the same\r\n authorizations as the old, but with the validity prolonged.\r\nCalls to refresh without a valid JWT will return status code 403(Forbidden)",
             "operationId":"refreshLogin",
             "consumes":[
 
             ],
             "produces":[
                "text/plain",
                "application/json",
                "text/json"
             ],
             "parameters":[
 
             ],
             "responses":{
                "200":{
                   "description":"Success",
                   "schema":{
                      "$ref":"#/definitions/LoginViewModel"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/ErrorResultViewModel"
                   }
                }
             }
          }
       },
       "/logout":{
          "get":{
             "tags":[
                "Sso"
             ],
             "summary":"Invalidate the JWT-token as a part of the logout system",
             "description":"Does nothing at the moment.Planned expansion.",
             "operationId":"logoutLogin",
             "consumes":[
 
             ],
             "produces":[
                "text/plain",
                "application/json",
                "text/json"
             ],
             "parameters":[
 
             ],
             "responses":{
                "200":{
                   "description":"Success"
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/ErrorResultViewModel"
                   }
                }
             }
          }
       },
       "/forgot":{
          "get":{
             "tags":[
                "Sso"
             ],
             "summary":"Send one-time-token to the users email",
             "operationId":"forgotLogin",
             "consumes":[
 
             ],
             "produces":[
 
             ],
             "parameters":[
                {
                   "name":"email",
                   "in":"query",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"Success"
                }
             }
          }
       },
       "/company/{companyId}/user":{
          "get":{
             "tags":[
                "Sso"
             ],
             "summary":"Get list of users in the company",
             "operationId":"listUser",
             "consumes":[
 
             ],
             "produces":[
                "text/plain",
                "application/json",
                "text/json"
             ],
             "parameters":[
                {
                   "name":"companyId",
                   "in":"path",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"Success",
                   "schema":{
                      "uniqueItems":false,
                      "type":"array",
                      "items":{
                         "$ref":"#/definitions/BaseUserViewModel"
                      }
                   }
                }
             }
          },
          "post":{
             "tags":[
                "Sso"
             ],
             "summary":"Create new user",
             "operationId":"createUser",
             "consumes":[
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
             ],
             "produces":[
                "text/plain",
                "application/json",
                "text/json"
             ],
             "parameters":[
                {
                   "name":"companyId",
                   "in":"path",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"body",
                   "in":"body",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/CreateUserViewModel"
                   }
                }
             ],
             "responses":{
                "201":{
                   "description":"Success",
                   "schema":{
                      "$ref":"#/definitions/BaseUserViewModel"
                   }
                },
                "403":{
                   "description":"Forbidden",
                   "schema":{
                      "$ref":"#/definitions/ErrorResultViewModel"
                   }
                }
             }
          }
       },
       "/company/{companyId}/user/{userId}":{
          "get":{
             "tags":[
                "Sso"
             ],
             "summary":"Get info on the user",
             "description":"The old API requires the parameter to be called userId, but in fact it refers to the contactId",
             "operationId":"infoUser",
             "consumes":[
 
             ],
             "produces":[
                "text/plain",
                "application/json",
                "text/json"
             ],
             "parameters":[
                {
                   "name":"companyId",
                   "in":"path",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"userId",
                   "in":"path",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"Success",
                   "schema":{
                      "$ref":"#/definitions/BaseUserViewModel"
                   }
                }
             }
          },
          "put":{
             "tags":[
                "Sso"
             ],
             "summary":"Update user",
             "description":"The old API requires the parameter to be called userId, but in fact it refers to the contactId",
             "operationId":"updateUser",
             "consumes":[
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
             ],
             "produces":[
                "text/plain",
                "application/json",
                "text/json"
             ],
             "parameters":[
                {
                   "name":"companyId",
                   "in":"path",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"userId",
                   "in":"path",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"body",
                   "in":"body",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/CreateUserViewModel"
                   }
                }
             ],
             "responses":{
                "200":{
                   "description":"Success",
                   "schema":{
                      "$ref":"#/definitions/User"
                   }
                }
             }
          }
       },
       "/company/{companyId}/user/{userId}/password":{
          "put":{
             "tags":[
                "Sso"
             ],
             "summary":"Set new password",
             "description":"Password can be set by any user (as given in the JWT) but only by the user herself.\r\nStatus 403 if attempt is made to change password for someone else\r\nThe old API requires the parameter to be called userId, but in fact it refers to the contactId",
             "operationId":"passwordUser",
             "consumes":[
                "multipart/form-data"
             ],
             "produces":[
 
             ],
             "parameters":[
                {
                   "name":"companyId",
                   "in":"path",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"userId",
                   "in":"path",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"password",
                   "in":"formData",
                   "required":true,
                   "type":"string",
                   "maxLength":250,
                   "minLength":6
                }
             ],
             "responses":{
                "200":{
                   "description":"Success"
                }
             }
          }
       },
       "/company/{companyId}/user/{userId}/role/{role}":{
          "put":{
             "tags":[
                "Sso"
             ],
             "summary":"Add role to user",
             "operationId":"roleaddUser",
             "consumes":[
 
             ],
             "produces":[
                "text/plain",
                "application/json",
                "text/json"
             ],
             "parameters":[
                {
                   "name":"companyId",
                   "in":"path",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"userId",
                   "in":"path",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"role",
                   "in":"path",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"Success",
                   "schema":{
                      "type":"string"
                   }
                },
                "403":{
                   "description":"Forbidden",
                   "schema":{
                      "type":"string"
                   }
                }
             }
          },
          "delete":{
             "tags":[
                "Sso"
             ],
             "summary":"Remove role from user",
             "operationId":"roleremoveUser",
             "consumes":[
 
             ],
             "produces":[
 
             ],
             "parameters":[
                {
                   "name":"companyId",
                   "in":"path",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"userId",
                   "in":"path",
                   "required":true,
                   "type":"string"
                },
                {
                   "name":"role",
                   "in":"path",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"Success"
                }
             }
          }
       },
       "/already":{
          "get":{
             "tags":[
                "Sso"
             ],
             "summary":"check whether email, login or... exists already",
             "operationId":"alreadyUser",
             "consumes":[
 
             ],
             "produces":[
                "text/plain",
                "application/json",
                "text/json"
             ],
             "parameters":[
                {
                   "name":"email",
                   "in":"query",
                   "required":false,
                   "type":"string"
                },
                {
                   "name":"login",
                   "in":"query",
                   "required":false,
                   "type":"string"
                },
                {
                   "name":"mobile",
                   "in":"query",
                   "required":false,
                   "type":"string"
                }
             ],
             "responses":{
                "200":{
                   "description":"Success",
                   "schema":{
                      "type":"boolean"
                   }
                },
                "409":{
                   "description":"Conflict",
                   "schema":{
                      "type":"string"
                   }
                }
             }
          }
       }
    },
    "definitions":{
       "InfoViewModel":{
          "type":"object",
          "properties":{
             "info_exists":{
                "type":"boolean"
             },
             "info_string":{
                "type":"string"
             }
          }
       },
       "LoginViewModel":{
          "type":"object",
          "properties":{
             "jwt":{
                "type":"string"
             },
             "company_id":{
                "type":"string"
             },
             "companyname":{
                "type":"string"
             },
             "email":{
                "type":"string"
             },
             "is_logged_in":{
                "type":"boolean"
             },
             "latest_login":{
                "format":"date-time",
                "type":"string"
             },
             "login_count":{
                "format":"int32",
                "type":"integer"
             },
             "mobile":{
                "type":"string"
             },
             "name":{
                "type":"string"
             },
             "roles":{
                "uniqueItems":false,
                "type":"array",
                "items":{
                   "type":"string"
                }
             },
             "user_id":{
                "type":"string"
             },
             "user_login":{
                "type":"string"
             },
             "user_name":{
                "type":"string"
             }
          }
       },
       "ErrorResultViewModel":{
          "type":"object",
          "properties":{
             "errors":{
                "uniqueItems":false,
                "type":"array",
                "items":{
                   "$ref":"#/definitions/ErrorResult"
                }
             }
          }
       },
       "ErrorResult":{
          "type":"object",
          "properties":{
             "message":{
                "type":"string"
             },
             "path":{
                "type":"string"
             }
          }
       },
       "CreateUserViewModel":{
          "type":"object",
          "properties":{
             "password":{
                "type":"string"
             },
             "phone":{
                "type":"string"
             },
             "webadmin":{
                "type":"boolean"
             },
             "login":{
                "type":"string"
             },
             "company_id":{
                "type":"string"
             },
             "companyname":{
                "type":"string"
             },
             "email":{
                "type":"string"
             },
             "is_logged_in":{
                "type":"boolean"
             },
             "latest_login":{
                "format":"date-time",
                "type":"string"
             },
             "login_count":{
                "format":"int32",
                "type":"integer"
             },
             "mobile":{
                "type":"string"
             },
             "name":{
                "type":"string"
             },
             "roles":{
                "uniqueItems":false,
                "type":"array",
                "items":{
                   "type":"string"
                }
             },
             "user_id":{
                "type":"string"
             },
             "user_login":{
                "type":"string"
             },
             "user_name":{
                "type":"string"
             }
          }
       },
       "BaseUserViewModel":{
          "type":"object",
          "properties":{
             "company_id":{
                "type":"string"
             },
             "companyname":{
                "type":"string"
             },
             "email":{
                "type":"string"
             },
             "is_logged_in":{
                "type":"boolean"
             },
             "latest_login":{
                "format":"date-time",
                "type":"string"
             },
             "login_count":{
                "format":"int32",
                "type":"integer"
             },
             "mobile":{
                "type":"string"
             },
             "name":{
                "type":"string"
             },
             "roles":{
                "uniqueItems":false,
                "type":"array",
                "items":{
                   "type":"string"
                }
             },
             "user_id":{
                "type":"string"
             },
             "user_login":{
                "type":"string"
             },
             "user_name":{
                "type":"string"
             }
          }
       },
       "User":{
          "required":[
             "id",
             "login",
             "password",
             "fistname",
             "surname",
             "modified"
          ],
          "type":"object",
          "properties":{
             "id":{
                "format":"int32",
                "type":"integer"
             },
             "login":{
                "maxLength":100,
                "minLength":0,
                "type":"string"
             },
             "password":{
                "maxLength":250,
                "minLength":0,
                "type":"string"
             },
             "fistname":{
                "maxLength":100,
                "minLength":0,
                "type":"string"
             },
             "surname":{
                "maxLength":100,
                "minLength":0,
                "type":"string"
             },
             "email":{
                "maxLength":100,
                "minLength":0,
                "type":"string"
             },
             "rememberLogin":{
                "maxLength":1,
                "minLength":0,
                "type":"string"
             },
             "sessionKey":{
                "maxLength":32,
                "minLength":0,
                "type":"string"
             },
             "fistLogin":{
                "format":"date-time",
                "type":"string"
             },
             "lastLogin":{
                "format":"date-time",
                "type":"string"
             },
             "logins":{
                "format":"int32",
                "type":"integer"
             },
             "created":{
                "format":"date-time",
                "type":"string"
             },
             "modified":{
                "format":"date-time",
                "type":"string"
             },
             "aux":{
                "format":"int32",
                "type":"integer"
             },
             "loginCount":{
                "format":"int32",
                "type":"integer"
             },
             "phone":{
                "maxLength":20,
                "minLength":0,
                "type":"string"
             },
             "cellphone":{
                "maxLength":20,
                "minLength":0,
                "type":"string"
             },
             "contactId":{
                "maxLength":20,
                "minLength":0,
                "type":"string"
             },
             "nickname":{
                "maxLength":80,
                "minLength":0,
                "type":"string"
             },
             "customer":{
                "maxLength":10,
                "minLength":0,
                "type":"string"
             },
             "name":{
                "type":"string",
                "readOnly":true
             }
          }
       }
    },
    "securityDefinitions":{
       "Bearer":{
          "name":"Authorization",
          "in":"header",
          "type":"apiKey",
          "description":"JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\""
       }
    },
    "security":[
       {
          "Bearer":[
 
          ]
       }
    ]
 }